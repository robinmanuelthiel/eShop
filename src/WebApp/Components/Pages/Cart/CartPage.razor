@*
    CartPage.razor

    This Razor component represents the shopping cart page for the AdventureWorks web application.
    It displays the current user's shopping bag, allowing them to view, update, and proceed to checkout with their selected products.

    Features:
    - Displays a list of products currently in the user's cart, including product image, name, unit price, quantity, and total price per item.
    - Allows users to update the quantity of each product directly from the cart.
    - Shows a summary section with the total quantity and total price of items in the cart.
    - Provides navigation options to proceed to checkout or continue shopping.
    - Handles loading and empty cart states gracefully.
    - Uses dependency injection for navigation, basket state management, and product image URL resolution.
    - Implements form handling for updating product quantities with antiforgery protection.
    - Requires user authorization to access the cart page.
    - Utilizes stream rendering for improved performance.

    Parameters and Properties:
    - basketItems: The collection of items currently in the user's basket.
    - UpdateQuantityId: The product ID for which the quantity is being updated (bound from form).
    - UpdateQuantityValue: The new quantity value for the product being updated (bound from form).
    - TotalPrice: The computed total price of all items in the cart.
    - TotalQuantity: The computed total quantity of all items in the cart.

    Methods:
    - OnInitializedAsync: Loads the basket items when the component is initialized.
    - CurrentOrPendingQuantity: Determines the quantity to display for a product, accounting for pending updates.
    - UpdateQuantityAsync: Handles the form submission to update the quantity of a product in the cart.

    Attributes:
    - [StreamRendering]: Enables streaming rendering for the component.
    - [Authorize]: Restricts access to authenticated users only.

    Usage:
    - This component should be used as the main shopping cart page, accessible via the "/cart" route.
*@
@page "/cart"
@inject NavigationManager Nav
@inject BasketState Basket
@inject IProductImageUrlProvider ProductImages
@attribute [StreamRendering]
@attribute [Authorize]

<PageTitle>Shopping Bag | AdventureWorks</PageTitle>
<SectionContent SectionName="page-header-title">Shopping bag</SectionContent>

<div class='cart'>
    @if (basketItems is null)
    {
        <p>Loading...</p>
    }
    else if (basketItems.Count == 0)
    {
        <p>
            Your shopping bag is empty. <a href="">Continue shopping.</a>
        </p>
    }
    else
    {
        <div class='cart-items'>
            <div class='cart-item-header'>
                <div class='catalog-item-info'>Products</div>
                <div class='catalog-item-quantity'>Quantity</div>
                <div class='catalog-item-total'>Total</div>
            </div>
            @foreach (var item in basketItems)
            {
                var quantity = CurrentOrPendingQuantity(item.ProductId, item.Quantity);
                <div class="cart-item" @key="@item.Id">
                    <div class="catalog-item-info">
                        <img alt="@item.CamelCaseProductName" src="@ProductImages.GetProductImageUrl(item.ProductId)" />
                        <div class="catalog-item-content">
                            <p class="name">@item.CamelCaseProductName</p>
                            <p class="price">$@item.UnitPrice.ToString("0.00")</p>
                        </div>
                    </div>
                    <div class="catalog-item-quantity">
                        <form method="post" data-enhance>
                            <input type="hidden" name="_handler" value="update-cart" />
                            <AntiforgeryToken />
                            <input aria-label="product quantity" type="number" name="UpdateQuantityValue" value="@quantity" min="0" />
                            <button type="submit" 
                                    class="button button-secondary"
                                    name="UpdateQuantityId" 
                                    value="@item.ProductId">
                                Update
                            </button>
                        </form>
                    </div>
                    <div class="catalog-item-total">
                        $@((item.UnitPrice * quantity).ToString("0.00"))
                    </div>
                </div>
            }
        </div>
       

        <div class="cart-summary">
            <div class="cart-summary-container">
                <div class="cart-summary-header">
                    <img role="presentation" src="icons/cart.svg" />
                    Your shopping bag
                    <span class="filter-badge">@TotalQuantity</span>
                </div>
                <div class="cart-summary-total">
                    <div>Total</div>
                    <div>$@TotalPrice?.ToString("0.00")</div>
                </div>
                <a href="checkout" class="button button-primary">Check out</a>
                <a href="" class="cart-summary-link">
                    <img role="presentation" src="icons/arrow-left.svg" />
                    <p>Continue shopping</p>
                </a>
            </div>
        </div>
    }
</div>

<form @formname="update-cart" @onsubmit="@UpdateQuantityAsync"></form>

@code {
    private IReadOnlyCollection<BasketItem>? basketItems;

    [SupplyParameterFromForm]
    public int? UpdateQuantityId { get; set; }

    [SupplyParameterFromForm]
    public int? UpdateQuantityValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        basketItems = await Basket.GetBasketItemsAsync();
    }

    private decimal? TotalPrice => basketItems?.Sum(i => i.Quantity * i.UnitPrice);
    private decimal? TotalQuantity => basketItems?.Sum(i => i.Quantity);

    // While an update post is in process, we want to show the pending quantity, not the one
    // that is committed to the cart (otherwise the UI briefly shows the old data)
    private int CurrentOrPendingQuantity(int productId, int cartQuantity)
        => UpdateQuantityId.GetValueOrDefault(-1) == productId
        ? UpdateQuantityValue!.Value
        : cartQuantity;

    private async Task UpdateQuantityAsync()
    {
        var id = UpdateQuantityId!.Value;
        var quantity = UpdateQuantityValue!.Value;
        await Basket.SetQuantityAsync(id, quantity);
        basketItems = await Basket.GetBasketItemsAsync();
    }
}
