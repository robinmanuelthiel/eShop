@inject CatalogService CatalogService
@inject NavigationManager Nav

@if (catalogBrands is not null && catalogItemTypes is not null)
{
    <div class="catalog-search">
        <div class="catalog-search-header">
            <img role="presentation" src="icons/filters.svg" />
            Filters
        </div>
        <div class="catalog-search-types">
            <div class="catalog-search-group">
                <h3>Brand</h3>
                <div class="catalog-search-group-tags">
                    <a href="@BrandUri(null)"
                    class="catalog-search-tag @(BrandId == null ? "active " : "")">
                        All
                    </a>
                    @foreach (var brand in catalogBrands)
                    {
                        <a href="@BrandUri(brand.Id)"
                        class="catalog-search-tag @(BrandId == brand.Id ? "active " : "")">
                            @brand.Brand
                        </a>
                    }
                </div>
            </div>
            <div class="catalog-search-group">
                <h3>Type</h3>

                <div class="catalog-search-group-tags">
                    <a href="@TypeUri(null)"
                    class="catalog-search-tag @(ItemTypeId == null ? "active " : "")">
                    All
                    </a>
                    @foreach (var itemType in catalogItemTypes)
                    {
                        <a href="@TypeUri(itemType.Id)"
                        class="catalog-search-tag @(ItemTypeId == itemType.Id ? "active " : "")">
                            @itemType.Type
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    IEnumerable<CatalogBrand>? catalogBrands;
    IEnumerable<CatalogItemType>? catalogItemTypes;
    [Parameter] public int? BrandId { get; set; }
    [Parameter] public int? ItemTypeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var brandsTask = CatalogService.GetBrands();
        var itemTypesTask = CatalogService.GetTypes();
        await Task.WhenAll(brandsTask, itemTypesTask);
        catalogBrands = brandsTask.Result;
        catalogItemTypes = itemTypesTask.Result;
    }

    private string BrandUri(int? brandId)
    {
        var uri = Nav.ToBaseRelativePath(Nav.Uri).Split('?')[0];
        var query = new Dictionary<string, object?>
        {
            { "page", null },
            { "brand", brandId },
            { "type", ItemTypeId }
        };
        var rel = uri + QueryString(query);
        return rel.StartsWith("/") ? rel : "/" + rel;
    }

    private string TypeUri(int? typeId)
    {
        var uri = Nav.ToBaseRelativePath(Nav.Uri).Split('?')[0];
        var query = new Dictionary<string, object?>
        {
            { "page", null },
            { "brand", BrandId },
            { "type", typeId }
        };
        var rel = uri + QueryString(query);
        return rel.StartsWith("/") ? rel : "/" + rel;
    }

    private static string QueryString(Dictionary<string, object?> query)
    {
        var parts = query
            .Where(kv => kv.Value != null)
            .Select(kv => $"{kv.Key}={Uri.EscapeDataString(kv.Value!.ToString()!)}");
        return parts.Any() ? "?" + string.Join("&", parts) : string.Empty;
    }
}
