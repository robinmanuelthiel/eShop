classDiagram
    %% Main Service
    class CatalogService {
        -HttpClient httpClient
        -string remoteServiceBaseUrl
        +GetCatalogItem(id int) Task~CatalogItem?~
        +GetCatalogItems(pageIndex int, pageSize int, brand int?, type int?) Task~CatalogResult~
        +GetCatalogItems(ids IEnumerable~int~) Task~List~CatalogItem~~
        +GetCatalogItemsWithSemanticRelevance(page int, take int, text string) Task~CatalogResult~
        +GetBrands() Task~IEnumerable~CatalogBrand~~
        +GetTypes() Task~IEnumerable~CatalogItemType~~
        -GetAllCatalogItemsUri(baseUri string, pageIndex int, pageSize int, brand int?, type int?) string
    }
    <<Service>> CatalogService

    %% Interface
    class ICatalogService {
        <<Interface>>
        +GetCatalogItem(id int) Task~CatalogItem?~
        +GetCatalogItems(pageIndex int, pageSize int, brand int?, type int?) Task~CatalogResult~
        +GetCatalogItems(ids IEnumerable~int~) Task~List~CatalogItem~~
        +GetCatalogItemsWithSemanticRelevance(page int, take int, text string) Task~CatalogResult~
        +GetBrands() Task~IEnumerable~CatalogBrand~~
        +GetTypes() Task~IEnumerable~CatalogItemType~~
    }

    %% Catalog Domain
    class CatalogItem {
        +int Id
        +string Name
        +string Description
        +decimal Price
        +string PictureUri
        +int CatalogBrandId
        +int CatalogTypeId
        +CatalogBrand Brand
        +CatalogItemType Type
    }
    class CatalogResult {
        +List~CatalogItem~ Items
        +int TotalItems
        +int PageIndex
        +int PageSize
    }
    class CatalogBrand {
        +int Id
        +string Brand
    }
    class CatalogItemType {
        +int Id
        +string Type
    }

    %% Relationships
    CatalogService ..|> ICatalogService : implements
    CatalogService --> CatalogItem : uses
    CatalogService --> CatalogResult : uses
    CatalogService --> CatalogBrand : uses
    CatalogService --> CatalogItemType : uses
    CatalogResult "1" o-- "*" CatalogItem : contains
    CatalogItem "*" --> "1" CatalogBrand : has
    CatalogItem "*" --> "1" CatalogItemType : has

    %% Subgraphs for organization
    namespace "WebAppComponents.Services" {
        CatalogService
        ICatalogService
    }
    namespace "WebAppComponents.Catalog" {
        CatalogItem
        CatalogResult
        CatalogBrand
        CatalogItemType
    }

    %% Styling
    classDef service fill:#e0f7fa,stroke:#00796b,stroke-width:2px;
    classDef interface fill:#fffde7,stroke:#fbc02d,stroke-width:2px;
    classDef domain fill:#f3e5f5,stroke:#6a1b9a,stroke-width:2px;
    class CatalogService,ICatalogService service;
    class CatalogItem,CatalogResult,CatalogBrand,CatalogItemType domain;
    class ICatalogService interface;

    %% Tooltips and links
    click CatalogService href "https://github.com/dotnet-architecture/eShopOnWeb" "CatalogService implementation"
    click ICatalogService href "https://github.com/dotnet-architecture/eShopOnWeb" "ICatalogService interface"
    click CatalogItem href "https://github.com/dotnet-architecture/eShopOnWeb" "CatalogItem entity"
    click CatalogResult href "https://github.com/dotnet-architecture/eShopOnWeb" "CatalogResult entity"
    click CatalogBrand href "https://github.com/dotnet-architecture/eShopOnWeb" "CatalogBrand entity"
    click CatalogItemType href "https://github.com/dotnet-architecture/eShopOnWeb" "CatalogItemType entity"

    %% Notes
    note for CatalogService "Handles all catalog-related HTTP operations\nand data transformations."
    note for ICatalogService "Defines the contract for catalog operations."
    note for CatalogItem "Represents a product in the catalog."
    note for CatalogResult "Paged result of catalog items."
    note for CatalogBrand "Represents a product brand."
    note for CatalogItemType "Represents a product type/category."